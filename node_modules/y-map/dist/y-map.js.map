{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/Map.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","yMap","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","extend","Y","YMap","_Y$utils$CustomType","os","model","contents","opContents","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","_model","id","map","utils","copyObject","eventHandler","EventHandler","op","oldValue","key","struct","parentSub","getType","left","compareIds","value","opContent","deleted","content","undefined","callEventListeners","name","object","type","target","_inherits","_createClass","destroy","keys","concat","right","del","modDel","requestTransaction","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","delegateYield","awaitOps","applyCreatedOperations","stop","awaitAndPrematurelyCall","insert","getNextOpId","origin","parent","typeDefinition","isTypeDefinition","createType","_callee2","_context2","_callee3","_context3","addEventListener","removeEventListener","path","observeProperty","event","propertyName","get","observe","unobserve","deleteChildObservers","resetObserverPath","set","Map","observePath","slice","observer","_changed","transaction","_context4","getOperation","t0","store","initType","receivedOp","CustomType","CustomTypeDefinition","class","YMapInitializer","_context5","t1","done","t2","abrupt"],"mappings":"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","file":"y-map.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y /* :any */) {\n  class YMap extends Y.utils.CustomType {\n    /* ::\n    _model: Id;\n    os: Y.AbstractDatabase;\n    map: Object;\n    contents: any;\n    opContents: Object;\n    eventHandler: Function;\n    */\n    constructor (os, model, contents, opContents) {\n      super()\n      this._model = model.id\n      this.os = os\n      this.map = Y.utils.copyObject(model.map)\n      this.contents = contents\n      this.opContents = opContents\n      this.eventHandler = new Y.utils.EventHandler(op => {\n        var oldValue\n        // key is the name to use to access (op)content\n        var key = op.struct === 'Delete' ? op.key : op.parentSub\n\n        // compute oldValue\n        if (this.opContents[key] != null) {\n          oldValue = this.os.getType(this.opContents[key])\n        } else {\n          oldValue = this.contents[key]\n        }\n        // compute op event\n        if (op.struct === 'Insert') {\n          if (op.left === null && !Y.utils.compareIds(op.id, this.map[key])) {\n            var value\n            // TODO: what if op.deleted??? I partially handles this case here.. but need to send delete event instead. somehow related to #4\n            if (op.opContent != null) {\n              value = this.os.getType(op.opContent)\n              delete this.contents[key]\n              if (op.deleted) {\n                delete this.opContents[key]\n              } else {\n                this.opContents[key] = op.opContent\n              }\n            } else {\n              value = op.content[0]\n              delete this.opContents[key]\n              if (op.deleted) {\n                delete this.contents[key]\n              } else {\n                this.contents[key] = op.content[0]\n              }\n            }\n            this.map[key] = op.id\n            if (oldValue === undefined) {\n              this.eventHandler.callEventListeners({\n                name: key,\n                object: this,\n                type: 'add',\n                value: value\n              })\n            } else {\n              this.eventHandler.callEventListeners({\n                name: key,\n                object: this,\n                oldValue: oldValue,\n                type: 'update',\n                value: value\n              })\n            }\n          }\n        } else if (op.struct === 'Delete') {\n          if (Y.utils.compareIds(this.map[key], op.target)) {\n            delete this.opContents[key]\n            delete this.contents[key]\n            this.eventHandler.callEventListeners({\n              name: key,\n              object: this,\n              oldValue: oldValue,\n              type: 'delete'\n            })\n          }\n        } else {\n          throw new Error('Unexpected Operation!')\n        }\n      })\n    }\n    _destroy () {\n      this.eventHandler.destroy()\n      this.eventHandler = null\n      this.contents = null\n      this.opContents = null\n      this._model = null\n      this.os = null\n      this.map = null\n    }\n    get (key) {\n      // return property.\n      // if property does not exist, return null\n      // if property is a type, return it\n      if (key == null || typeof key !== 'string') {\n        throw new Error('You must specify a key (as string)!')\n      }\n      if (this.opContents[key] == null) {\n        return this.contents[key]\n      } else {\n        return this.os.getType(this.opContents[key])\n      }\n    }\n    keys () {\n      return Object.keys(this.contents).concat(Object.keys(this.opContents))\n    }\n    keysPrimitives () {\n      return Object.keys(this.contents)\n    }\n    keysTypes () {\n      return Object.keys(this.opContents)\n    }\n    /*\n      If there is a primitive (not a custom type), then return it.\n      Returns all primitive values, if propertyName is specified!\n      Note: modifying the return value could result in inconsistencies!\n        -- so make sure to copy it first!\n    */\n    getPrimitive (key) {\n      if (key == null) {\n        return Y.utils.copyObject(this.contents)\n      } else if (typeof key !== 'string') {\n        throw new Error('Key is expected to be a string!')\n      } else {\n        return this.contents[key]\n      }\n    }\n    getType (key) {\n      if (key == null || typeof key !== 'string') {\n        throw new Error('You must specify a key (as string)!')\n      } else if (this.opContents[key] != null) {\n        return this.os.getType(this.opContents[key])\n      } else {\n        return null\n      }\n    }\n    delete (key) {\n      var right = this.map[key]\n      if (right != null) {\n        var del = {\n          target: right,\n          struct: 'Delete'\n        }\n        var eventHandler = this.eventHandler\n        var modDel = Y.utils.copyObject(del)\n        modDel.key = key\n        this.os.requestTransaction(function *() {\n          yield* eventHandler.awaitOps(this, this.applyCreatedOperations, [[del]])\n        })\n        // always remember to do that after this.os.requestTransaction\n        // (otherwise values might contain a undefined reference to type)\n        eventHandler.awaitAndPrematurelyCall([modDel])\n      }\n    }\n    set (key, value) {\n      // set property.\n      // if property is a type, return it\n      // if not, apply immediately on this type an call event\n\n      var right = this.map[key] || null\n      var insert /* :any */ = {\n        id: this.os.getNextOpId(1),\n        left: null,\n        right: right,\n        origin: null,\n        parent: this._model,\n        parentSub: key,\n        struct: 'Insert'\n      }\n      var eventHandler = this.eventHandler\n      var typeDefinition = Y.utils.isTypeDefinition(value)\n      if (typeDefinition !== false) {\n        var type = this.os.createType(typeDefinition)\n        insert.opContent = type._model\n        // construct a new type\n        this.os.requestTransaction(function *() {\n          yield* eventHandler.awaitOps(this, this.applyCreatedOperations, [[insert]])\n        })\n        // always remember to do that after this.os.requestTransaction\n        // (otherwise values might contain a undefined reference to type)\n        eventHandler.awaitAndPrematurelyCall([insert])\n        return type\n      } else {\n        insert.content = [value]\n        this.os.requestTransaction(function * () {\n          yield* eventHandler.awaitOps(this, this.applyCreatedOperations, [[insert]])\n        })\n        // always remember to do that after this.os.requestTransaction\n        // (otherwise values might contain a undefined reference to type)\n        eventHandler.awaitAndPrematurelyCall([insert])\n        return value\n      }\n    }\n    observe (f) {\n      this.eventHandler.addEventListener(f)\n    }\n    unobserve (f) {\n      this.eventHandler.removeEventListener(f)\n    }\n    /*\n      Observe a path.\n\n      E.g.\n      ```\n      o.set('textarea', Y.TextBind)\n      o.observePath(['textarea'], function(t){\n        // is called whenever textarea is replaced\n        t.bind(textarea)\n      })\n\n      returns a function that removes the observer from the path.\n    */\n    observePath (path, f) {\n      var self = this\n      var propertyName\n      function observeProperty (event) {\n        // call f whenever path changes\n        if (event.name === propertyName) {\n          // call this also for delete events!\n          f(self.get(propertyName))\n        }\n      }\n\n      if (path.length < 1) {\n        f(this)\n        return function () {}\n      } else if (path.length === 1) {\n        propertyName = path[0]\n        f(self.get(propertyName))\n        this.observe(observeProperty)\n        return function () {\n          self.unobserve(f)\n        }\n      } else {\n        var deleteChildObservers\n        var resetObserverPath = function () {\n          var map = self.get(path[0])\n          if (!(map instanceof YMap)) {\n            // its either not defined or a primitive value / not a map\n            map = self.set(path[0], Y.Map)\n          }\n          deleteChildObservers = map.observePath(path.slice(1), f)\n        }\n        var observer = function (event) {\n          if (event.name === path[0]) {\n            if (deleteChildObservers != null) {\n              deleteChildObservers()\n            }\n            if (event.type === 'add' || event.type === 'update') {\n              resetObserverPath()\n            }\n            // TODO: what about the delete events?\n          }\n        }\n        self.observe(observer)\n        resetObserverPath()\n        // returns a function that deletes all the child observers\n        // and how to unobserve the observe from this object\n        return function () {\n          if (deleteChildObservers != null) {\n            deleteChildObservers()\n          }\n          self.unobserve(observer)\n        }\n      }\n    }\n    * _changed (transaction, op) {\n      if (op.struct === 'Delete') {\n        if (op.key == null) {\n          var target = yield* transaction.getOperation(op.target)\n          op.key = target.parentSub\n        }\n      } else if (op.opContent != null) {\n        yield* transaction.store.initType.call(transaction, op.opContent)\n      }\n      this.eventHandler.receivedOp(op)\n    }\n  }\n  Y.extend('Map', new Y.utils.CustomTypeDefinition({\n    name: 'Map',\n    class: YMap,\n    struct: 'Map',\n    initType: function * YMapInitializer (os, model) {\n      var contents = {}\n      var opContents = {}\n      var map = model.map\n      for (var name in map) {\n        var op = yield* this.getOperation(map[name])\n        if (op.deleted) continue\n        if (op.opContent != null) {\n          opContents[name] = op.opContent\n          yield* this.store.initType.call(this, op.opContent)\n        } else {\n          contents[name] = op.content[0]\n        }\n      }\n      return new YMap(os, model, contents, opContents)\n    },\n    createType: function YMapCreator (os, model) {\n      return new YMap(os, model, {}, {})\n    }\n  }))\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"],"sourceRoot":"/source/"}